#version 430

/*
	This file is part of the implementation for the technical paper

		Field-Aligned Online Surface Reconstruction
		Nico Schertler, Marco Tarini, Wenzel Jakob, Misha Kazhdan, Stefan Gumhold, Daniele Panozzo
		ACM TOG 36, 4, July 2017 (Proceedings of SIGGRAPH 2017)

	Use of this source code is granted via a BSD-style license, which can be found
	in License.txt in the repository root.

	@author Nico Schertler
*/

layout (vertices = 3) out;

uniform int R;

struct VertexData
{
	vec4 pos;
	vec4 normal;
	vec4 colorDisplacement;
};

struct EdgeData
{
	uvec2 v;
	uint cPtr;
	uint isBoundary;
};

struct TriData
{
	ivec3 e;
	uint cPtr;
};

layout(std430, binding = 0) buffer vertexData
{
	VertexData v[];
};

layout(std430, binding = 1) buffer edgeData
{
	EdgeData e[];
};

layout(std430, binding = 2) buffer triData
{
    TriData tris[];
};

uint startVertex(int edgeId)
{
	if(edgeId >= 0)
		return e[edgeId].v[0];
	else
		return e[-edgeId - 1].v[1];
}

uint edgeIndex(int edgeId)
{
	if (edgeId >= 0)
		return edgeId;
	else
		return -edgeId - 1;
}

out TCS_OUT
{
	vec4 pos;
	vec4 n;
} vertex[];

patch out uint triId;

void main(void)
{
	int triIdx = gl_PrimitiveID;
	int vIdx = gl_InvocationID;

	TriData tri = tris[triIdx];
	int eId = tri.e[vIdx];
	uint eIndex = edgeIndex(eId);
	vertex[gl_InvocationID].pos = v[startVertex(eId)].pos;
	
	vertex[gl_InvocationID].n = v[startVertex(tri.e[vIdx])].normal;


	triId = triIdx;

	gl_TessLevelOuter[0] = R; 
	gl_TessLevelOuter[1] = R; 
	gl_TessLevelOuter[2] = R; 

	gl_TessLevelInner[0] = R; 
}