#version 430

layout(quads, equal_spacing) in;

in TCS_OUT
{
	vec4 pos;
	vec4 n;
} vIn[];

out TES_OUT
{
	vec4 pos;
	vec4 color;	
} vOut;

patch in uint quadId;

uniform mat4 mv;
uniform mat4 mvp;

uniform int R;

uniform vec3 boundaryColor;
uniform bool highlightBoundary;

struct VertexData
{
	vec4 pos;
	vec4 normal;
	vec4 colorDisplacement;
};

struct EdgeData
{
	uvec2 v;
	uint cPtr;
	uint isBoundary;
};

struct QuadData
{
	ivec4 e;
	uint cPtr;
};

layout(std430, binding = 0) buffer vertexData
{
	VertexData v[];
};

layout(std430, binding = 1) buffer edgeData
{
	EdgeData e[];
};

layout(std430, binding = 2) buffer quadData
{
    QuadData quads[];
};

layout(std430, binding = 3) buffer colorData
{
    vec4 c[];
};

uint startVertex(int edgeId)
{
	if(edgeId >= 0)
		return e[edgeId].v[0];
	else
		return e[-edgeId - 1].v[1];
}

vec4 edgeColor(int edgeId, uint idx)
{
	if(edgeId >= 0)
		return c[e[edgeId].cPtr + idx];
	else
		return c[e[-edgeId - 1].cPtr + R - 2 - idx];		
}

int edgeIndex(int edgeId)
{
	if(edgeId >= 0)
		return edgeId;
	else
		return -edgeId - 1;
}

vec4 colorDisplacement(uvec2 coord)
{
	vec4 ret;
	//corners
	if(coord == vec2(0, 0))
		ret = v[startVertex(quads[quadId].e[0])].colorDisplacement;
	else if(coord == vec2(R, 0))
		ret = v[startVertex(quads[quadId].e[1])].colorDisplacement;
	else if(coord == vec2(R, R))
		ret = v[startVertex(quads[quadId].e[2])].colorDisplacement;
	else if(coord == vec2(0, R))
		ret = v[startVertex(quads[quadId].e[3])].colorDisplacement;

	//edges
	else if(coord.y == 0)
		ret = edgeColor(quads[quadId].e[0], coord.x - 1);
	else if(coord.x == R)
		ret = edgeColor(quads[quadId].e[1], coord.y - 1);
	else if(coord.y == R)
		ret = edgeColor(quads[quadId].e[2], R - coord.x - 1);
	else if(coord.x == 0)
		ret = edgeColor(quads[quadId].e[3], R - coord.y - 1);

	//face
	else
		ret = c[quads[quadId].cPtr + coord.x - 1 + (coord.y - 1) * (R - 1)];

	if(highlightBoundary)
	{
		if(coord.y <= R / 2  && e[edgeIndex(quads[quadId].e[0])].isBoundary == 1)
			ret.rgb = boundaryColor;
		if(coord.x >= R / 2  && e[edgeIndex(quads[quadId].e[1])].isBoundary == 1)
			ret.rgb = boundaryColor;
		if(coord.y >= R / 2  && e[edgeIndex(quads[quadId].e[2])].isBoundary == 1)
			ret.rgb = boundaryColor;
		if(coord.x <= R / 2  && e[edgeIndex(quads[quadId].e[3])].isBoundary == 1)
			ret.rgb = boundaryColor;
	}

	return ret;
}

void main(void)
{
	vec2 uv = gl_TessCoord.xy;
	
	uvec2 i = uvec2(round(R * uv));
	vec4 cd = colorDisplacement(i);

	vOut.color = vec4(cd.rgb, 1);

	vec4 n = ((1 - uv.x) * ((1 - uv.y) * vIn[0].n + uv.y * vIn[3].n) + uv.x * ((1 - uv.y) * vIn[1].n + uv.y * vIn[2].n));
	vec4 p = (1 - uv.x) * ((1 - uv.y) * vIn[0].pos + uv.y * vIn[3].pos) + uv.x * ((1 - uv.y) * vIn[1].pos + uv.y * vIn[2].pos) + cd.w * n;
	vOut.pos = mv * p;
	//vOut.n = mv * n;

	gl_Position = mvp * p;	
}