#version 430

layout(triangles, equal_spacing) in;

in TCS_OUT
{
	vec4 pos;
	vec4 n;
} vIn[];

out TES_OUT
{
	vec4 pos;
	vec4 color;	
} vOut;

patch in uint triId;

uniform mat4 mv;
uniform mat4 mvp;

uniform int R;

uniform vec3 boundaryColor;
uniform bool highlightBoundary;

struct VertexData
{
	vec4 pos;
	vec4 normal;
	vec4 colorDisplacement;
};

struct EdgeData
{
	uvec2 v;
	uint cPtr;
	uint isBoundary;
};

struct TriData
{
	ivec3 e;
	uint cPtr;
};

layout(std430, binding = 0) buffer vertexData
{
	VertexData v[];
};

layout(std430, binding = 1) buffer edgeData
{
	EdgeData e[];
};

layout(std430, binding = 2) buffer triData
{
    TriData tris[];
};

layout(std430, binding = 3) buffer colorData
{
    vec4 c[];
};

uint startVertex(int edgeId)
{
	if(edgeId >= 0)
		return e[edgeId].v[0];
	else
		return e[-edgeId - 1].v[1];
}

vec4 edgeColor(int edgeId, uint idx)
{
	if(edgeId >= 0)
		return c[e[edgeId].cPtr + idx];
	else
		return c[e[-edgeId - 1].cPtr + R - 2 - idx];
}

int edgeIndex(int edgeId)
{
	if(edgeId >= 0)
		return edgeId;
	else
		return -edgeId - 1;
}

vec4 colorDisplacement(uvec3 rev, vec3 bary)
{
	vec4 ret;
	//corners
	if(bary.x == 1)
		ret = v[startVertex(tris[triId].e[0])].colorDisplacement;
	else if(bary.y == 1)
		ret = v[startVertex(tris[triId].e[1])].colorDisplacement;
	else if(bary.z == 1)
		ret = v[startVertex(tris[triId].e[2])].colorDisplacement;

	//edges
	else if(bary.z == 0)
		ret = edgeColor(tris[triId].e[0], rev.z - 1);
	else if(bary.x == 0)
		ret = edgeColor(tris[triId].e[1], rev.z - 1);
	else if(bary.y == 0)
		ret = edgeColor(tris[triId].e[2], rev.z - 1);

	//face
	else
	{
		uint index = 
			3 * (rev.x - 1) * (R - rev.x) //all texels from larger rings
			+ rev.y * (R - 2 * rev.x) //all texels from previous edges of the same ring
			+ rev.z;

		ret = c[tris[triId].cPtr + index];
	}

	if(highlightBoundary)
	{
		if(bary.z <= 0.5  && e[edgeIndex(tris[triId].e[0])].isBoundary == 1)
			ret.rgb = boundaryColor;
		if(bary.x <= 0.5  && e[edgeIndex(tris[triId].e[1])].isBoundary == 1)
			ret.rgb = boundaryColor;
		if(bary.y <= 0.5  && e[edgeIndex(tris[triId].e[2])].isBoundary == 1)
			ret.rgb = boundaryColor;
	}

	return ret;
}

uvec3 barycentricToRingEdgeVertex(vec3 barycentric)
{
	uvec3 rev; //ring, edge, vector

	float minBary;
	if(barycentric.x < barycentric.y && barycentric.x < barycentric.z)
	{
		minBary = barycentric.x;
		rev.y = 1;
	}
	else if(barycentric.y < barycentric.z)
	{
		minBary = barycentric.y;
		rev.y = 2;
	}
	else
	{
		minBary = barycentric.z;
		rev.y = 0;
	}
	rev.x = uint(round(3.0 / 2.0 * R * minBary));
	uint verticesOnRingEdge = R - 2 * rev.x;
	
	float denom = 3 * minBary - 1;	
	rev.z = (denom == 0 
				? 0
				: uint(round((barycentric[rev.y] + 2 * minBary - 1) * (R - 2 * rev.x) / denom))
			);
	if(rev.z >= verticesOnRingEdge)
	{
		rev.z = 0;
		rev.y = (rev.y + 1) % 3;
	}

	return rev;
}

void main(void)
{
	vec3 barycentric = gl_TessCoord.xyz;
	uvec3 rev = barycentricToRingEdgeVertex(barycentric);

	//uvec2 i = uvec2(round(R * uv));
	vec4 cd = colorDisplacement(rev, barycentric);

	vOut.color = vec4(cd.rgb, 1);	

	vec4 n = barycentric.x * vIn[0].n + barycentric.y * vIn[1].n + barycentric.z * vIn[2].n;
	vec4 p = barycentric.x * vIn[0].pos + barycentric.y * vIn[1].pos + barycentric.z * vIn[2].pos + cd.w * n;
	vOut.pos = mv * p;
	//vOut.n = mv * n;

	gl_Position = mvp * p;	
}